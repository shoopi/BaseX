/**
 * This class is generated by jOOQ
 */
package main.java.nl.tue.ieis.is.basex.entities.jooq;


import javax.annotation.Generated;

import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.Actor;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.BmActor;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.BusinessModel;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.Company;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.CostBenefit;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.CostBenefitActor;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.CpActivity;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.LocationGui;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.Strategy;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.User;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.UserHasStrategy;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.ActorRecord;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.BmActorRecord;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.BusinessModelRecord;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.CompanyRecord;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.CostBenefitActorRecord;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.CostBenefitRecord;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.CpActivityRecord;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.LocationGuiRecord;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.StrategyRecord;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.UserHasStrategyRecord;
import main.java.nl.tue.ieis.is.basex.entities.jooq.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>basex_database</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActorRecord> KEY_ACTOR_PRIMARY = UniqueKeys0.KEY_ACTOR_PRIMARY;
    public static final UniqueKey<BmActorRecord> KEY_BM_ACTOR_PRIMARY = UniqueKeys0.KEY_BM_ACTOR_PRIMARY;
    public static final UniqueKey<BusinessModelRecord> KEY_BUSINESS_MODEL_PRIMARY = UniqueKeys0.KEY_BUSINESS_MODEL_PRIMARY;
    public static final UniqueKey<CompanyRecord> KEY_COMPANY_PRIMARY = UniqueKeys0.KEY_COMPANY_PRIMARY;
    public static final UniqueKey<CostBenefitRecord> KEY_COST_BENEFIT_PRIMARY = UniqueKeys0.KEY_COST_BENEFIT_PRIMARY;
    public static final UniqueKey<CostBenefitActorRecord> KEY_COST_BENEFIT_ACTOR_PRIMARY = UniqueKeys0.KEY_COST_BENEFIT_ACTOR_PRIMARY;
    public static final UniqueKey<CpActivityRecord> KEY_CP_ACTIVITY_PRIMARY = UniqueKeys0.KEY_CP_ACTIVITY_PRIMARY;
    public static final UniqueKey<LocationGuiRecord> KEY_LOCATION_GUI_PRIMARY = UniqueKeys0.KEY_LOCATION_GUI_PRIMARY;
    public static final UniqueKey<StrategyRecord> KEY_STRATEGY_PRIMARY = UniqueKeys0.KEY_STRATEGY_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
    public static final UniqueKey<UserHasStrategyRecord> KEY_USER_HAS_STRATEGY_PRIMARY = UniqueKeys0.KEY_USER_HAS_STRATEGY_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BmActorRecord, ActorRecord> FK_BM_ACTOR_ACTOR1 = ForeignKeys0.FK_BM_ACTOR_ACTOR1;
    public static final ForeignKey<BmActorRecord, BusinessModelRecord> FK_BM_ACTOR_BUSINESS_MODEL1 = ForeignKeys0.FK_BM_ACTOR_BUSINESS_MODEL1;
    public static final ForeignKey<BusinessModelRecord, StrategyRecord> FK_BUSINESS_MODEL_PROJECT = ForeignKeys0.FK_BUSINESS_MODEL_PROJECT;
    public static final ForeignKey<BusinessModelRecord, UserRecord> FK_BUSINESS_MODEL_USER1 = ForeignKeys0.FK_BUSINESS_MODEL_USER1;
    public static final ForeignKey<BusinessModelRecord, UserRecord> FK_BUSINESS_MODEL_USER2 = ForeignKeys0.FK_BUSINESS_MODEL_USER2;
    public static final ForeignKey<CostBenefitActorRecord, BmActorRecord> FK_COST_BENEFIT_ACTOR_BM_ACTOR1 = ForeignKeys0.FK_COST_BENEFIT_ACTOR_BM_ACTOR1;
    public static final ForeignKey<CostBenefitActorRecord, CostBenefitRecord> FK_COST_BENEFIT_ACTOR_COST_BENEFIT1 = ForeignKeys0.FK_COST_BENEFIT_ACTOR_COST_BENEFIT1;
    public static final ForeignKey<CpActivityRecord, BmActorRecord> FK_COPRODUCTION_BM_ACTOR1 = ForeignKeys0.FK_COPRODUCTION_BM_ACTOR1;
    public static final ForeignKey<UserRecord, CompanyRecord> FK_USER_COMPANY1 = ForeignKeys0.FK_USER_COMPANY1;
    public static final ForeignKey<UserHasStrategyRecord, UserRecord> FK_USER_HAS_STRATEGY_USER1 = ForeignKeys0.FK_USER_HAS_STRATEGY_USER1;
    public static final ForeignKey<UserHasStrategyRecord, StrategyRecord> FK_USER_HAS_STRATEGY_STRATEGY1 = ForeignKeys0.FK_USER_HAS_STRATEGY_STRATEGY1;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<ActorRecord> KEY_ACTOR_PRIMARY = createUniqueKey(Actor.ACTOR, "KEY_actor_PRIMARY", Actor.ACTOR.ACTOR_ID);
        public static final UniqueKey<BmActorRecord> KEY_BM_ACTOR_PRIMARY = createUniqueKey(BmActor.BM_ACTOR, "KEY_bm_actor_PRIMARY", BmActor.BM_ACTOR.BM_ACTOR_ID, BmActor.BM_ACTOR.ACTOR_ID, BmActor.BM_ACTOR.BM_ID);
        public static final UniqueKey<BusinessModelRecord> KEY_BUSINESS_MODEL_PRIMARY = createUniqueKey(BusinessModel.BUSINESS_MODEL, "KEY_business_model_PRIMARY", BusinessModel.BUSINESS_MODEL.BM_ID, BusinessModel.BUSINESS_MODEL.STRATEGY_ID, BusinessModel.BUSINESS_MODEL.CREATED_BY, BusinessModel.BUSINESS_MODEL.LAST_EDITED_BY);
        public static final UniqueKey<CompanyRecord> KEY_COMPANY_PRIMARY = createUniqueKey(Company.COMPANY, "KEY_company_PRIMARY", Company.COMPANY.COMPANY_NAME);
        public static final UniqueKey<CostBenefitRecord> KEY_COST_BENEFIT_PRIMARY = createUniqueKey(CostBenefit.COST_BENEFIT, "KEY_cost_benefit_PRIMARY", CostBenefit.COST_BENEFIT.CB_ID);
        public static final UniqueKey<CostBenefitActorRecord> KEY_COST_BENEFIT_ACTOR_PRIMARY = createUniqueKey(CostBenefitActor.COST_BENEFIT_ACTOR, "KEY_cost_benefit_actor_PRIMARY", CostBenefitActor.COST_BENEFIT_ACTOR.CB_ACTOR_ID, CostBenefitActor.COST_BENEFIT_ACTOR.BM_ACTOR_ID, CostBenefitActor.COST_BENEFIT_ACTOR.CB_ID);
        public static final UniqueKey<CpActivityRecord> KEY_CP_ACTIVITY_PRIMARY = createUniqueKey(CpActivity.CP_ACTIVITY, "KEY_cp_activity_PRIMARY", CpActivity.CP_ACTIVITY.CP_ACTIVITY_ID, CpActivity.CP_ACTIVITY.BM_ACTOR_ID);
        public static final UniqueKey<LocationGuiRecord> KEY_LOCATION_GUI_PRIMARY = createUniqueKey(LocationGui.LOCATION_GUI, "KEY_location_gui_PRIMARY", LocationGui.LOCATION_GUI.COMPONENT_ID);
        public static final UniqueKey<StrategyRecord> KEY_STRATEGY_PRIMARY = createUniqueKey(Strategy.STRATEGY, "KEY_strategy_PRIMARY", Strategy.STRATEGY.STRATEGY_ID);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.USER_ID, User.USER.COMPANY_NAME);
        public static final UniqueKey<UserHasStrategyRecord> KEY_USER_HAS_STRATEGY_PRIMARY = createUniqueKey(UserHasStrategy.USER_HAS_STRATEGY, "KEY_user_has_strategy_PRIMARY", UserHasStrategy.USER_HAS_STRATEGY.USER_USER_ID, UserHasStrategy.USER_HAS_STRATEGY.STRATEGY_STRATEGY_ID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<BmActorRecord, ActorRecord> FK_BM_ACTOR_ACTOR1 = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_ACTOR_PRIMARY, BmActor.BM_ACTOR, "fk_BM_ACTOR_ACTOR1", BmActor.BM_ACTOR.ACTOR_ID);
        public static final ForeignKey<BmActorRecord, BusinessModelRecord> FK_BM_ACTOR_BUSINESS_MODEL1 = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_BUSINESS_MODEL_PRIMARY, BmActor.BM_ACTOR, "fk_BM_ACTOR_BUSINESS_MODEL1", BmActor.BM_ACTOR.BM_ID);
        public static final ForeignKey<BusinessModelRecord, StrategyRecord> FK_BUSINESS_MODEL_PROJECT = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_STRATEGY_PRIMARY, BusinessModel.BUSINESS_MODEL, "fk_business_model_project", BusinessModel.BUSINESS_MODEL.STRATEGY_ID);
        public static final ForeignKey<BusinessModelRecord, UserRecord> FK_BUSINESS_MODEL_USER1 = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_USER_PRIMARY, BusinessModel.BUSINESS_MODEL, "fk_BUSINESS_MODEL_USER1", BusinessModel.BUSINESS_MODEL.CREATED_BY);
        public static final ForeignKey<BusinessModelRecord, UserRecord> FK_BUSINESS_MODEL_USER2 = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_USER_PRIMARY, BusinessModel.BUSINESS_MODEL, "fk_BUSINESS_MODEL_USER2", BusinessModel.BUSINESS_MODEL.LAST_EDITED_BY);
        public static final ForeignKey<CostBenefitActorRecord, BmActorRecord> FK_COST_BENEFIT_ACTOR_BM_ACTOR1 = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_BM_ACTOR_PRIMARY, CostBenefitActor.COST_BENEFIT_ACTOR, "fk_cost_benefit_actor_bm_actor1", CostBenefitActor.COST_BENEFIT_ACTOR.BM_ACTOR_ID);
        public static final ForeignKey<CostBenefitActorRecord, CostBenefitRecord> FK_COST_BENEFIT_ACTOR_COST_BENEFIT1 = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_COST_BENEFIT_PRIMARY, CostBenefitActor.COST_BENEFIT_ACTOR, "fk_COST_BENEFIT_ACTOR_COST_BENEFIT1", CostBenefitActor.COST_BENEFIT_ACTOR.CB_ID);
        public static final ForeignKey<CpActivityRecord, BmActorRecord> FK_COPRODUCTION_BM_ACTOR1 = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_BM_ACTOR_PRIMARY, CpActivity.CP_ACTIVITY, "fk_COPRODUCTION_BM_ACTOR1", CpActivity.CP_ACTIVITY.BM_ACTOR_ID);
        public static final ForeignKey<UserRecord, CompanyRecord> FK_USER_COMPANY1 = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_COMPANY_PRIMARY, User.USER, "fk_user_Company1", User.USER.COMPANY_NAME);
        public static final ForeignKey<UserHasStrategyRecord, UserRecord> FK_USER_HAS_STRATEGY_USER1 = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_USER_PRIMARY, UserHasStrategy.USER_HAS_STRATEGY, "fk_USER_has_STRATEGY_USER1", UserHasStrategy.USER_HAS_STRATEGY.USER_USER_ID);
        public static final ForeignKey<UserHasStrategyRecord, StrategyRecord> FK_USER_HAS_STRATEGY_STRATEGY1 = createForeignKey(main.java.nl.tue.ieis.is.basex.entities.jooq.Keys.KEY_STRATEGY_PRIMARY, UserHasStrategy.USER_HAS_STRATEGY, "fk_USER_has_STRATEGY_STRATEGY1", UserHasStrategy.USER_HAS_STRATEGY.STRATEGY_STRATEGY_ID);
    }
}
